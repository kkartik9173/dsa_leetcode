import java.util.*;

// Node class definition
class Node {
    public int val;
    public List<Node> neighbors;

    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }

    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }

    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}

public class GraphClone {

    // Clone method using DFS
    public Node cloneGraph(Node node) {
        if (node == null) {
            return null;
        }

        // HashMap to keep track of already visited nodes
        Map<Node, Node> visited = new HashMap<>();

        // Start DFS to clone the graph
        return dfs(node, visited);
    }

    private Node dfs(Node node, Map<Node, Node> visited) {
        if (visited.containsKey(node)) {
            return visited.get(node);
        }

        // Create a new node for the current node
        Node newNode = new Node(node.val);
        visited.put(node, newNode);

        // Recurse for each neighbor of the current node
        for (Node neighbor : node.neighbors) {
            newNode.neighbors.add(dfs(neighbor, visited));
        }

        return newNode;
    }

    // Helper method to create the graph from the adjacency list
    public Node createGraph(List<List<Integer>> adjList) {
        // Create all nodes
        Node[] nodes = new Node[adjList.size()];
        for (int i = 0; i < adjList.size(); i++) {
            nodes[i] = new Node(i + 1);  // Nodes are 1-indexed
        }

        // Build the graph using the adjacency list
        for (int i = 0; i < adjList.size(); i++) {
            for (int neighbor : adjList.get(i)) {
                nodes[i].neighbors.add(nodes[neighbor - 1]);  // Adjusting for 1-indexed values
            }
        }

        // Return the first node (usually the starting point for graph traversal)
        return nodes[0];
    }

    // Main method to test
    public static void main(String[] args) {
        GraphClone graphClone = new GraphClone();

        // Input adjacency list
        List<List<Integer>> adjList = new ArrayList<>();
        adjList.add(Arrays.asList(2, 4));
        adjList.add(Arrays.asList(1, 3));
        adjList.add(Arrays.asList(2, 4));
        adjList.add(Arrays.asList(1, 3));

        // Create the graph
        Node originalGraph = graphClone.createGraph(adjList);

        // Clone the graph
        Node clonedGraph = graphClone.cloneGraph(originalGraph);

        // Printing or further operations can be done to verify the cloned graph
        System.out.println("Original and Cloned graphs are now separate.");
    }
}
